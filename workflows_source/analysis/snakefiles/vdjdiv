##############################################################################
## SNAKEFILE
## PIPELINE: Immunoglobulin sequencing analysis
## SUB-PIPELINE: Analysis
## FILE: segdiv
## AUTHOR: Will Bradshan
##############################################################################
## Compute segment diversity spectra for Ig-Seq samples
##############################################################################

#-----------------------------------------------------------------------------
# Specify input and output directories
#-----------------------------------------------------------------------------

out_dir_segdiv = os.path.join(out_dir_analysis, "{segments}_div")
log_dir_segdiv = os.path.join(log_dir_analysis, "{segments}_div")

#-----------------------------------------------------------------------------
# Compute bootstrapped diversities (all segments)
#-----------------------------------------------------------------------------

rule segment_diversity_bootstraps:
    """Compute bootstraps for diversity-spectrum generation."""
    input: os.path.join(out_dir_setup, "seqs-all_{segments}-filtered.tab")
    output: os.path.join(out_dir_segdiv,\
        "{group_within}/{group_between}/bootstraps.tsv")
    log: os.path.join(log_dir_segdiv,\
        "{group_within}/{group_between}/bootstraps.dbg")
    conda: env_r_analysis
    params:
        min_n = config["vdj_div_parameters"]["min_n"],
        max_n = config["vdj_div_parameters"]["max_n"],
        clone_field = lambda wildcards: \
            "BEST_" + wildcards.segments.upper() + "_CALL",
        nboot = config["vdj_div_parameters"]["nboot"],
        aux = aux_dir_analysis,
    script: os.path.join(script_dir_analysis,\
            "compute_diversity_bootstraps.R")

rule segment_diversity_tables_bootstrapped:
    """Compute diversity scores for each bootstrap replicate."""
    input: os.path.join(out_dir_segdiv,\
        "{group_within}/{group_between}/bootstraps.tsv")
    output:
        alpha = os.path.join(out_dir_segdiv, "{group_within}/{group_between}", \
            "diversity-alpha-bootstrapped.tsv"),
        beta = os.path.join(out_dir_segdiv, "{group_within}/{group_between}", \
            "diversity-beta-bootstrapped.tsv"),
        gamma = os.path.join(out_dir_segdiv, "{group_within}/{group_between}", \
            "diversity-gamma-bootstrapped.tsv"),
        solo = os.path.join(out_dir_segdiv, "{group_within}/{group_between}", \
            "diversity-solo-bootstrapped.tsv"),
    log: os.path.join(log_dir_segdiv, "{group_within}/{group_between}", \
        "segment-diversity-bootstrapped.dbg")
    conda: env_r_analysis
    params:
        min_q = config["vdj_div_parameters"]["min_q"],
        max_q = config["vdj_div_parameters"]["max_q"],
        step_q = config["vdj_div_parameters"]["step_q"],
        clone_field = lambda wildcards: \
            "BEST_" + wildcards.segments.upper() + "_CALL",
        aux = aux_dir_analysis,
    script: os.path.join(script_dir_analysis,\
            "compute_diversity.R")

#-----------------------------------------------------------------------------
# Compute bootstrapped diversities (large segments)
#-----------------------------------------------------------------------------

rule filter_segments_seg_5plus:
    """Filter out smaller clone from a segment-filtered dataset."""
    input: os.path.join(out_dir_setup, "seqs-all_{segments}-filtered.tab")
    output: os.path.join(out_dir_segdiv,\
        "seqs-all_{segments}-filtered_clones-filtered-5plus.tab")
    log: os.path.join(log_dir_segdiv, "filter_small_segments_{segments}.tab")
    conda: env_r_analysis
    params:
        min_size = 5,
        aux = aux_dir_analysis,
    script: os.path.join(script_dir_analysis,\
            "filter_by_clonesize.R")

rule segment_diversity_bootstraps_5plus:
    """Compute bootstraps for diversity-spectrum generation."""
    input: os.path.join(out_dir_segdiv,\
        "seqs-all_{segments}-filtered_clones-filtered-5plus.tab")
    output: os.path.join(out_dir_segdiv,\
        "{group_within}/{group_between}/bootstraps-5plus.tsv")
    log: os.path.join(log_dir_segdiv,\
        "{group_within}/{group_between}/bootstraps-5plus.dbg")
    conda: env_r_analysis
    params:
        min_n = config["vdj_div_parameters"]["min_n"],
        max_n = config["vdj_div_parameters"]["max_n"],
        clone_field = lambda wildcards: \
            "BEST_" + wildcards.segments.upper() + "_CALL",
        nboot = config["vdj_div_parameters"]["nboot"],
        aux = aux_dir_analysis,
    script: os.path.join(script_dir_analysis,\
            "compute_diversity_bootstraps.R")

rule segment_diversity_tables_bootstrapped_5plus:
    """Compute diversity scores for each bootstrap replicate."""
    input: os.path.join(out_dir_segdiv,\
        "{group_within}/{group_between}/bootstraps-5plus.tsv")
    output:
        alpha = os.path.join(out_dir_segdiv, "{group_within}/{group_between}", \
            "diversity-alpha-5plus-bootstrapped.tsv"),
        beta = os.path.join(out_dir_segdiv, "{group_within}/{group_between}", \
            "diversity-beta-5plus-bootstrapped.tsv"),
        gamma = os.path.join(out_dir_segdiv, "{group_within}/{group_between}", \
            "diversity-gamma-5plus-bootstrapped.tsv"),
        solo = os.path.join(out_dir_segdiv, "{group_within}/{group_between}", \
            "diversity-solo-5plus-bootstrapped.tsv"),
    log: os.path.join(log_dir_segdiv, "{group_within}/{group_between}", \
        "segment-diversity-bootstrapped-5plus.dbg")
    conda: env_r_analysis
    params:
        min_q = config["vdj_div_parameters"]["min_q"],
        max_q = config["vdj_div_parameters"]["max_q"],
        step_q = config["vdj_div_parameters"]["step_q"],
        clone_field = lambda wildcards: \
            "BEST_" + wildcards.segments.upper() + "_CALL",
        aux = aux_dir_analysis,
    script: os.path.join(script_dir_analysis,\
            "compute_diversity.R")

#-----------------------------------------------------------------------------
# Compute bootstrapped diversities (small segments)
#-----------------------------------------------------------------------------

rule filter_segments_seg_4minus:
    """Filter out larger clones from a segment-filtered dataset."""
    input: os.path.join(out_dir_setup, "seqs-all_{segments}-filtered.tab")
    output: os.path.join(out_dir_segdiv,\
        "seqs-all_{segments}-filtered_clones-filtered-4minus.tab")
    log: os.path.join(log_dir_segdiv, "filter_small_segments_{segments}.tab")
    conda: env_r_analysis
    params:
        min_size = 1,
        max_size = 4, # < 5
        aux = aux_dir_analysis,
    script: os.path.join(script_dir_analysis,\
            "filter_by_clonesize.R")

rule segment_diversity_bootstraps_4minus:
    """Compute bootstraps for diversity-spectrum generation."""
    input: os.path.join(out_dir_segdiv,\
        "seqs-all_{segments}-filtered_clones-filtered-4minus.tab")
    output: os.path.join(out_dir_segdiv,\
        "{group_within}/{group_between}/bootstraps-4minus.tsv")
    log: os.path.join(log_dir_segdiv,\
        "{group_within}/{group_between}/bootstraps-4minus.dbg")
    conda: env_r_analysis
    params:
        min_n = config["vdj_div_parameters"]["min_n"],
        max_n = config["vdj_div_parameters"]["max_n"],
        clone_field = lambda wildcards: \
            "BEST_" + wildcards.segments.upper() + "_CALL",
        nboot = config["vdj_div_parameters"]["nboot"],
        aux = aux_dir_analysis,
    script: os.path.join(script_dir_analysis,\
            "compute_diversity_bootstraps.R")

rule segment_diversity_tables_bootstrapped_4minus:
    """Compute diversity scores for each bootstrap replicate."""
    input: os.path.join(out_dir_segdiv,\
        "{group_within}/{group_between}/bootstraps-4minus.tsv")
    output:
        alpha = os.path.join(out_dir_segdiv, "{group_within}/{group_between}", \
            "diversity-alpha-4minus-bootstrapped.tsv"),
        beta = os.path.join(out_dir_segdiv, "{group_within}/{group_between}", \
            "diversity-beta-4minus-bootstrapped.tsv"),
        gamma = os.path.join(out_dir_segdiv, "{group_within}/{group_between}", \
            "diversity-gamma-4minus-bootstrapped.tsv"),
        solo = os.path.join(out_dir_segdiv, "{group_within}/{group_between}", \
            "diversity-solo-4minus-bootstrapped.tsv"),
    log: os.path.join(log_dir_segdiv, "{group_within}/{group_between}", \
        "segment-diversity-bootstrapped-4minus.dbg")
    conda: env_r_analysis
    params:
        min_q = config["vdj_div_parameters"]["min_q"],
        max_q = config["vdj_div_parameters"]["max_q"],
        step_q = config["vdj_div_parameters"]["step_q"],
        clone_field = lambda wildcards: \
            "BEST_" + wildcards.segments.upper() + "_CALL",
        aux = aux_dir_analysis,
    script: os.path.join(script_dir_analysis,\
            "compute_diversity.R")

#-----------------------------------------------------------------------------
# Summarise diversities, compute CIs
#-----------------------------------------------------------------------------

rule segment_summarise_diversity:
    """Summarise bootstrapped diversity spectra."""
    input: os.path.join(out_dir_segdiv, "{group_within}/{group_between}", \
        "diversity-{divtype}-bootstrapped.tsv")
    output: os.path.join(out_dir_segdiv, "{group_within}/{group_between}", \
        "diversity-{divtype}-summarised.tsv")
    log: os.path.join(log_dir_segdiv, "{group_within}/{group_between}", \
        "segment-diversity-{divtype}-summarised.dbg")
    conda: env_r_analysis
    params:
        min_q = config["vdj_div_parameters"]["min_q"],
        max_q = config["vdj_div_parameters"]["max_q"],
        step_q = config["vdj_div_parameters"]["step_q"],
        ci = config["vdj_div_parameters"]["ci"],
        divtype = lambda wildcards: wildcards.divtype.split("-")[0],
        aux = aux_dir_analysis,
    script: os.path.join(script_dir_analysis,\
            "summarise_diversity.R")

#-----------------------------------------------------------------------------
# Run permutation tests
#-----------------------------------------------------------------------------

rule segment_kruskal_wallis_permute:
    """Run Kruskal-Wallis permutation tests on bootstrapped solo diversities."""
    input: os.path.join(out_dir_segdiv, "{group_within}/{group_between}", \
            "diversity-solo-bootstrapped.tsv")
    output: os.path.join(out_dir_segdiv, "{group_within}/{group_between}", \
            "kw-permute-pvalues.tsv")
    log: os.path.join(log_dir_segdiv, "{group_within}/{group_between}", \
            "kw-permute-pvalues.dbg")
    conda: env_r_analysis
    params:
        n_permutes = config["vdj_div_parameters"]["n_permute"],
        verbose = True,
        aux = aux_dir_analysis,
    threads: config["threads"]["kw"]
    script: os.path.join(script_dir_analysis,\
            "kruskal_wallis_permute.R")

rule segment_kruskal_wallis_permute_5plus:
    """Run Kruskal-Wallis permutation tests on bootstrapped solo diversities."""
    input: os.path.join(out_dir_segdiv, "{group_within}/{group_between}", \
            "diversity-solo-5plus-bootstrapped.tsv")
    output: os.path.join(out_dir_segdiv, "{group_within}/{group_between}", \
            "kw-permute-5plus-pvalues.tsv")
    log: os.path.join(log_dir_segdiv, "{group_within}/{group_between}", \
            "kw-permute-5plus-pvalues.dbg")
    conda: env_r_analysis
    params:
        n_permutes = config["vdj_div_parameters"]["n_permute"],
        verbose = True,
        aux = aux_dir_analysis,
    threads: config["threads"]["kw"]
    script: os.path.join(script_dir_analysis,\
            "kruskal_wallis_permute.R")

rule segment_kruskal_wallis_permute_4minus:
    """Run Kruskal-Wallis permutation tests on bootstrapped solo diversities."""
    input: os.path.join(out_dir_segdiv, "{group_within}/{group_between}", \
            "diversity-solo-4minus-bootstrapped.tsv")
    output: os.path.join(out_dir_segdiv, "{group_within}/{group_between}", \
            "kw-permute-4minus-pvalues.tsv")
    log: os.path.join(log_dir_segdiv, "{group_within}/{group_between}", \
            "kw-permute-4minus-pvalues.dbg")
    conda: env_r_analysis
    params:
        n_permutes = config["vdj_div_parameters"]["n_permute"],
        verbose = True,
        aux = aux_dir_analysis,
    threads: config["threads"]["kw"]
    script: os.path.join(script_dir_analysis,\
            "kruskal_wallis_permute.R")
