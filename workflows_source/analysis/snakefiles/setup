##############################################################################
## SNAKEFILE
## PIPELINE: Immunoglobulin sequencing analysis
## SUB-PIPELINE: Downstream analysis
## FILE: setup
## AUTHOR: Will Bradshaw
##############################################################################
## Prepare Change-O DBs and other files for downstream analysis
##############################################################################

#-----------------------------------------------------------------------------
# Specify input and output directories
#-----------------------------------------------------------------------------

out_dir_setup = os.path.join(out_dir_analysis, "setup")
log_dir_setup = os.path.join(log_dir_analysis, "setup")

#------------------------------------------------------------------------------
# Handle group filtering
#------------------------------------------------------------------------------

rule filter_groups:
    """Exclude unwanted sequence groups from downstream analysis."""
    input: os.path.join(config["out_dir_changeo"], "seqs-{set}.tab")
    output: os.path.join(out_dir_setup, "seqs-{set}_groups-filtered.tab")
    log: os.path.join(log_dir_setup, "seqs-{set}_filter-groups.dbg")
    conda: env_r_analysis
    params:
        filter_groups = config["filter_groups"],
        keep_complement = config["keep_complement"],
        aux = aux_dir_analysis,
    script: os.path.join(script_dir_analysis, "filter_groups.R")

#------------------------------------------------------------------------------
# Filter ambiguous segments
#------------------------------------------------------------------------------

rule filter_ambiguous_segments:
    """Filter sequences with ambiguous segment calls from Change-O DB."""
    input: os.path.join(out_dir_setup, "seqs-{set}_groups-filtered.tab")
    output: os.path.join(out_dir_setup, "seqs-{set}_{segments}-filtered.tab")
    log: os.path.join(log_dir_setup, "seqs-{set}_filter-{segments}.dbg")
    conda: env_r_analysis
    params:
        filter_V = lambda wildcards: "V" in wildcards.segments.upper(),
        filter_D = lambda wildcards: "D" in wildcards.segments.upper(),
        filter_J = lambda wildcards: "J" in wildcards.segments.upper(),
        aux = aux_dir_analysis,
    script: os.path.join(script_dir_analysis, "filter_segments.R")
