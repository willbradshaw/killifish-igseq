##############################################################################
## SNAKEFILE
## PIPELINE: Immunoglobulin sequencing analysis
## SUB-PIPELINE: Analysis
## FILE: clonediv
## AUTHOR: Will Bradshaw
##############################################################################
## Compute clone-size diversity spectra for Ig-Seq samples
##############################################################################

#-----------------------------------------------------------------------------
# Specify input and output directories
#-----------------------------------------------------------------------------

out_dir_clonediv = os.path.join(out_dir_analysis, "clonediv")
log_dir_clonediv = os.path.join(log_dir_analysis, "clonediv")

#-----------------------------------------------------------------------------
# Compute bootstrapped diversities
#-----------------------------------------------------------------------------

rule clone_diversity_bootstraps:
    """Compute bootstraps for diversity-spectrum generation."""
    input: os.path.join(out_dir_setup, "seqs-all_groups-filtered.tab")
    output: os.path.join(out_dir_clonediv,\
        "{group_within}/{group_between}/bootstraps.tsv")
    log: os.path.join(log_dir_clonediv,\
        "{group_within}/{group_between}/bootstraps.dbg")
    conda: env_r_analysis
    params:
        min_n = config["clone_div_parameters"]["min_n"],
        max_n = config["clone_div_parameters"]["max_n"],
        clone_field = "CLONE",
        nboot = config["clone_div_parameters"]["nboot"],
        aux = aux_dir_analysis,
    script: os.path.join(script_dir_analysis,\
            "compute_diversity_bootstraps.R")

rule clone_diversity_tables_bootstrapped:
    """Compute diversity scores for each bootstrap replicate."""
    input: os.path.join(out_dir_clonediv,\
        "{group_within}/{group_between}/bootstraps.tsv")
    output:
        alpha = os.path.join(out_dir_clonediv, "{group_within}/{group_between}", \
            "diversity-alpha-bootstrapped.tsv"),
        beta = os.path.join(out_dir_clonediv, "{group_within}/{group_between}", \
            "diversity-beta-bootstrapped.tsv"),
        gamma = os.path.join(out_dir_clonediv, "{group_within}/{group_between}", \
            "diversity-gamma-bootstrapped.tsv"),
        solo = os.path.join(out_dir_clonediv, "{group_within}/{group_between}", \
            "diversity-solo-bootstrapped.tsv"),
    log: os.path.join(log_dir_clonediv, "{group_within}/{group_between}", \
        "clone-diversity-bootstrapped.dbg")
    conda: env_r_analysis
    params:
        min_q = config["clone_div_parameters"]["min_q"],
        max_q = config["clone_div_parameters"]["max_q"],
        step_q = config["clone_div_parameters"]["step_q"],
        clone_field = lambda wildcards: "CLONE",
        aux = aux_dir_analysis,
    script: os.path.join(script_dir_analysis,\
            "compute_diversity.R")

#-----------------------------------------------------------------------------
# Summarise diversities
#-----------------------------------------------------------------------------

rule clone_summarise_diversity:
    """Summarise bootstrapped diversity spectra."""
    input: os.path.join(out_dir_clonediv, "{group_within}/{group_between}", \
        "diversity-{divtype}-bootstrapped.tsv")
    output: os.path.join(out_dir_clonediv, "{group_within}/{group_between}", \
        "diversity-{divtype}-summarised.tsv")
    log: os.path.join(log_dir_clonediv, "{group_within}/{group_between}", \
        "clone-diversity-{divtype}-summarised.dbg")
    conda: env_r_analysis
    params:
        min_q = config["clone_div_parameters"]["min_q"],
        max_q = config["clone_div_parameters"]["max_q"],
        step_q = config["clone_div_parameters"]["step_q"],
        ci = config["clone_div_parameters"]["ci"],
        aux = aux_dir_analysis,
    script: os.path.join(script_dir_analysis,\
            "summarise_diversity.R")

#-----------------------------------------------------------------------------
# Run permutation tests
#-----------------------------------------------------------------------------

rule clone_kruskal_wallis_permute:
    """Run Kruskal-Wallis permutation tests on bootstrapped solo diversities."""
    input: os.path.join(out_dir_clonediv, "{group_within}/{group_between}", \
            "diversity-solo-bootstrapped.tsv")
    output: os.path.join(out_dir_clonediv, "{group_within}/{group_between}", \
            "kw-permute-pvalues.tsv")
    log: os.path.join(log_dir_clonediv, "{group_within}/{group_between}", \
            "kw-permute-pvalues.dbg")
    conda: env_r_analysis
    params:
        n_permutes = config["clone_div_parameters"]["n_permute"],
        verbose = True,
        aux = aux_dir_analysis,
    threads: config["threads"]["kw"]
    script: os.path.join(script_dir_analysis,\
            "kruskal_wallis_permute.R")
